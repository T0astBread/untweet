#!/bin/bash
set -euo pipefail


TWITTER_DATE_FORMAT="\"%a %b %e %H:%M:%S %z %Y\""

[[ -f .env ]] && source .env
username=$UNTW_USERNAME

function _twurl {
	twurl \
		--consumer-key $UNTW_CONSUMER_KEY \
		--consumer-secret $UNTW_CONSUMER_SECRET \
		$@
}

function load_likes {
	_twurl "/1.1/favorites/list.json?screen_name=$username&include_entities=false&count=2000"
}

function load_tweets {
	_twurl "/1.1/statuses/user_timeline.json?screen_name=$username&trim_user=true&exclude_replies=false&include_rts=true&count=2000"
}

function mark_old {
	days_until_old=$1
	jq -s ".[0] as \$keep											\
	| (.[1] | map(													\
		.id_str as \$id												\
		| (now - (													\
			.created_at | strptime($TWITTER_DATE_FORMAT) | mktime	\
		) > (60 * 60 * 24 * $days_until_old))						\
		as \$is_old													\
		| (\$keep | any(. == \$id))									\
		as \$is_kept												\
		| {															\
			id_str: \$id,											\
			user_name: (try .user.screen_name catch null),			\
			text: .text, 											\
			created_at: .created_at,								\
			is_old: \$is_old,										\
			keep: \$is_kept,										\
			is_marked: (\$is_old and (\$is_kept | not)),			\
		}															\
	))" keep.json -
}

function set_color {
	tput setaf "$1"
}

function display {
	days_until_old="$1"
	
	tput init
	printf "Date       Old?  Keep? ID                  Text\n"
	
	marked_date_color=10
	date_color=2
	marked_flag_color=15
	flag_color=7
	marked_text_color=7
	text_color=8
 
	mark_old $days_until_old | jq -r "															\
		def if_marked(\$a; \$b): (if .is_marked then \$a else \$b end);							\
		map(																					\
			(if_marked(\"$(tput bold)\"; \"\")) +												\
			(if_marked(\"$(set_color $marked_date_color)\"; \"$(set_color $date_color)\")) +	\
			(.created_at | strptime($TWITTER_DATE_FORMAT) | strftime(\"%Y/%m/%d\")) + \" \" +	\
			(if_marked(\"$(set_color $marked_flag_color)\"; \"$(set_color $flag_color)\")) +	\
			(if .is_old then \"true  \" else \"false \" end) +									\
			(if .keep then \"true  \" else \"false \" end) +									\
			(if_marked(\"$(set_color $marked_text_color)\"; \"$(set_color $text_color)\")) +	\
			.id_str + \" \" +																	\
			(if .user_name != null then \"@\" + .user_name + \": \" else \"\" end)? +			\
			.text +																				\
			\"$(tput sgr0)\"																	\
		) | .[]"
}

function destroy {
	thing_name="$1"
	destroy_url="$2"
	days_until_old="$3"
	mark_old "$days_until_old" \
	| jq -r "map(select(.is_marked)) | map(.id_str) | .[]" \
	| while read thing_id; do
		echo
		echo
		echo
		echo "Destroying $thing_name $thing_id..."
		echo
		cmd="_twurl -X POST \"$(echo $destroy_url | sed s/__id__/$thing_id/)\""
		echo $cmd
		output="$(eval $cmd)"
		#output="{\"errors\": []}"
		echo "$output"

		if [[ $(echo "$output" | jq ".errors | length") -ne 0 ]]; then
			echo "Twitter answered with errors"
			exit 1
		fi
	done
}

function destroy-likes {
	destroy favorite "/1.1/favorites/destroy.json?id=__id__&include_entities=false" "$1"
}

function destroy-tweets {
	destroy Tweet "/1.1/statuses/destroy/__id__.json?trim_user=true" "$1"
}

case "$1" in
	"authorize")
		_twurl authorize
		;;
	"load-tweets")
		load_tweets
		;;
	"load-likes")
		load_likes
		;;
	"display")
		display "$2"
		;;
	"destroy-likes")
		destroy-likes "$2"
		;;
	"destroy-tweets")
		destroy-tweets "$2"
		;;
esac
